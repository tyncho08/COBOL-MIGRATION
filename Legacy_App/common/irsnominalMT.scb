       >>source free
*>***********************************************
*>                                              *
*>                 IRS Nominal                  *
*>            File/Table RDB Handler            *
*>                                              *
*>***********************************************
*>
 identification division.
 Program-Id.            irsnominalMT.
*>**
*> Author.              Vincent B Coen, FBCS, FIDM, FIDPM, CPL
*>                      for Applewood Computers.
*>**
*> Security.            Copyright (C) 2016 & later, Vincent Bryan Coen.
*>                      Distributed under the GNU General Public License
*>                      v2.0. Only. See the file COPYING for details.
*>**
*> Remarks.             (IRS) Nominal File RDB Handler using amended JC preSQL.
*>                      **********************************************
*>
*>                      This version uses an amended JC pre-Sql processor.
*>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
*>
*>                      This and associated modules relate to ACAS versions v3.02 and later.
*>**
*>  File Handling:
*>     Uses the Global Error / Access logging file within the acas0nn module.
*>**
*> Called by Modules:
*>                      acasirsub1 - irsnominal Cobol Handler. (old irsub1) replacement.
*>
*>**
*> Error Messages Used.
*>                      IR906 Link/record exists on owning write   } same
*>                      IR907 Link/record exists on rewrite (S->O) }  as
*>                      IR908 link/record exists on sub write      } acasirsub1
*>
*>                      SM004 SQL Err no in 'mysql-procedures'
*>                      SM901 Note error and hit return.
*>**
*> Version.             1.00 17/06/2016.
*>
*>**
*> Changes.
*> 04/08/16 vbc - .01 Removed file action logging to sep. module ditto acas011.
*> 18/07/16 vbc - .02 Insert call for SQL error msg where missing and move
*>                    spaces / zero to SQL-Msg| Err and other little fixes/cleanups.
*>                    Remap all changes to the .scb source file.
*> 20/07/16 vbc - .03 Close logger if testing-1 set on table close.
*>                    branch to 999-end instead of 998-free when EOF on read next.
*>                    Seems to auto release if end of cursor data reached
*>                    and causes an abort ??
*> 30/07/16 vbc - .04 Change Open and Close to also show table name in operation.
*> 31/07/16 vbc - .05 Moved mv spaces/zero in Write to before insert.
*>                    Remove fhlogger file close in Process-Close.
*>                    Forgot error 989 so commented.
*> 02/10/16 vbc - .06 Modified for IRS processing & based on irsub1.
*>                    write, rewrite, start etc.
*> 22/12/16 vbc - .07 Changed to support fn-delete-all so that all
*>                    CoA can be cleared down (similarly to open output).
*>                    Also added fn-write-raw for nominalLD.
*> 29/12/16 vbc - .08 Fixed bugs in Start for 2->we-error and goto ba041
*>                    instead of ba040.
*>                    Fixed bug in Delete forgot to do sub as well if owner.
*> 30/12/16 vbc - .09 WE-Error is the only field tested for errors in irs so
*>                    clear it at start and use it replacing if poss. fs-reply.
*>                    This is only for IRS routines/modules - so far!
*>                .10 In ba050 when a sub present went to ba051 instead of ba050
*>                    as should get the isam key from pointer.
*>                    Now using Sql-State as well.
*> 01/03/18 vbc - .11 Renamed error messages to SM901, SM004 as needed.
*>                    Added IR906 - IR908 - also in acasirsub1.
*> 16/04/24 vbc       Copyright notice update superseding all previous notices.
*>**
*>  Module USAGE see irsdflt for details.
*>
 copy "ACAS-SQLstate-error-list.cob".
*>
*>********************************************************************************************
*>
*> Copyright Notice.
*> ****************
*>
*> This notice supersedes all prior copyright notices & was updated 2024-04-16.
*>
*> These files and programs are part of the Applewood Computers Accounting
*> System and is Copyright (c) Vincent B Coen. 1976-2025 and later.
*>
*> This program is now free software; you can redistribute it and/or modify it
*> under the terms listed here and of the GNU General Public License as
*> published by the Free Software Foundation; version 3 and later as revised
*> for PERSONAL USAGE ONLY and that includes for use within a business but
*> EXCLUDES repackaging or for Resale, Rental or Hire in ANY way.
*>
*> Persons interested in repackaging, redevelopment for the purpose of resale or
*> distribution in a rental or hire mode must get in touch with the copyright
*> holder with your commercial plans and proposals.
*>
*> ACAS is distributed in the hope that it will be useful, but WITHOUT
*> ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
*> FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
*> for more details. If it breaks, you own both pieces but I will endeavour
*> to fix it, providing you tell me about the problem.
*>
*> You should have received a copy of the GNU General Public License along
*> with ACAS; see the file COPYING.  If not, write to the Free Software
*> Foundation, 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
*>
*>**********************************************************************************
*>
 environment division.
*> copy "envdiv.cob".
*>
 input-output section.
 Data Division.
 Working-Storage Section.
 77  prog-name           pic x(22)    value "irsnominalMT (3.02.11)".
*>
*> JC WS requirements here
*>
 77  ws-Where            pic x(512).
*>
*>  Used within presql generated code
*>
 01  WS-Reply            pic x           value space.
 01  WS-MYSQL-I          PIC S9(4) COMP.
 01  WS-MYSQL-EDIT       PIC -Z(18)9.9(9).
 *>
 *> TESING data
 *>
 01  ws-temp-ed          pic 9(10).
*>
*> The communication area for the MySQL database changed for free/mysql
*>
*>  jc preSQL MySQL stuff ends
*>
*> Metadata on primary and alternate keys...  from Prima DAL for IRSNL-REC
*>
 01  Table-Of-Keynames.
     03  filler          pic x(30) value "KEY-1                         ".
     03  filler          pic x(8)  value "00010010". *> offset/length
     03  filler          pic xxx   value "STR".      *> key is string
*>
 01  filler redefines table-of-keynames.
     03  keyOfReference occurs 1    indexed by KOR-x1.
         05 KeyName      pic x(30).
         05 KOR-Offset   pic 9(4).
         05 KOR-Length   pic 9(4).
         05 KOR-Type     pic XXX.                    *> Not used currently
*>
*> The START condition cannot be compounded, and it must use a
*> Key of Reference within the record. (These are COBOL rules...)
*> The interface defines which key and the relation condition.
*>
 01  DAL-Data.
     05  MOST-Relation   pic xxx.                  *> valid are >=, <=, <, >, =
     05  Most-Cursor-Set pic 9    value zero.
         88  Cursor-Not-Active    value zero.
         88  Cursor-Active        value 1.
*>
*>  Variables common to all DALs
*>  ****************************
*>
 01  subscripts usage comp-5.
     12 J                pic s9(4).
     12 K                pic s9(4).
     12 L                pic s9(4).
*>
 01  work-fields.
     03  ws-env-lines    pic 999              value zero.
     03  ws-lines        binary-char unsigned value zero.
     03  ws-22-lines     binary-char unsigned value zero.
     03  ws-23-lines     binary-char unsigned value zero.
     03  ws-98-lines     binary-char unsigned value zero.
     03  ws-99-lines     binary-char unsigned value zero.
     03  ws-Rec-Cnt      binary-long unsigned value zero.
*>
 01  Error-Messages.
     03  SM901          pic x(31) value "SM901 Note error and hit return".
     03  IR906          pic x(40) value "IR906 Link/record exists on owning write".
     03  IR907          pic x(42) value "IR907 Link/record exists on rewrite (S->O)".
     03  IR908          pic x(37) value "IR908 link/record exists on sub write".
*>
/MYSQL VAR\
      BASE=ACASDB
      TABLE=IRSNL-REC,HV
/MYSQL-END\
*>
 Linkage Section.
*>**************
*>
*>**********************************************************************
 copy "wsfnctn.cob".                         *> File-Access
*>
*>**********************************************************************
*>
 copy "Test-Data-Flags.cob".  *> set sw-testing to zero to stop logging.
*>
*>  Record definition for Cobol file here:
*>
 01  WS-IRSNL-Record.
     03  NL-Key             pic 9(10).
     03  filler redefines NL-Key.
         05  NL-Owning      pic 9(5).
         05  NL-Sub-Nominal pic 9(5).
     03  NL-Tipe            pic x.
         88  Sub                     value "S".
         88  Owner                   value "O".
     03  NL-Data.
         05  NL-Name        pic x(24).
         05  NL-DR          pic 9(8)v99   comp.
         05  NL-CR          pic 9(8)v99   comp.
         05  Last-Posts.                      *>  occurs 4.
             07  DR-Last-01     pic 9(8)v99   comp.
             07  DR-Last-02     pic 9(8)v99   comp.
             07  DR-Last-03     pic 9(8)v99   comp.
             07  DR-Last-04     pic 9(8)v99   comp.
             07  CR-Last-01     pic 9(8)v99   comp.
             07  CR-Last-02     pic 9(8)v99   comp.
             07  CR-Last-03     pic 9(8)v99   comp.
             07  CR-Last-04     pic 9(8)v99   comp.
         05  NL-AC          pic x.
     03  filler  redefines  NL-Data.
         05  NL-Pointer     pic 9(5).
*>
 screen section.
*>=============
*>
 01  Display-Message-1       foreground-color 2.
     03          value "WS-Where="                line 23 col  1.
     03  from WS-Where (1:J)           pic x(69)          col 10.
*>
 01  Display-Message-2       foreground-color 2.
     03      value "SM004 SQL Err No.="            line 4 col  1.    *> size 18 char
     03  using Ws-Mysql-Error-Number   pic x(4)           col 19.    *>      4       == 22
     03      value " Para="                               col 23.    *> size 6 char  == 28
     03  using WS-No-Paragraph         pic 9(3)           col 29.    *>      4       == 32
     03      value " SQL Cmd="                            col 32.    *>      9       == 41
     03  using Ws-Mysql-Command        pic x(199)         col 41.
     03      value "SQL Err Msg="                  line 7 col  1.    *>      12
     03  using Ws-Mysql-Error-Message  pic x(67)          col 13.
*>
*>
 PROCEDURE DIVISION   using File-Access
                            ACAS-DAL-Common-data
                            WS-IRSNL-Record.   *>  Ws record
*>**********************************************
 ba-ACAS-DAL-Process  section.
     accept   ws-env-lines from lines.
     if       ws-env-lines < 24
              move  24 to ws-env-lines ws-lines
     else
              move  ws-env-lines to ws-lines
     end-if
*> Force Esc, PgUp, PgDown, PrtSC to be detected
     set      ENVIRONMENT "COB_SCREEN_EXCEPTIONS" to "Y".
     set      ENVIRONMENT "COB_SCREEN_ESC" to "Y".
*>
 ba010-Initialise.
*>
     move     zero   to We-Error                        *> as in irsub1
                        Fs-Reply.    *> for testing as in irsub1 Not used.
*>
     move     spaces to WS-MYSQL-Error-Message
                        WS-MYSQL-Error-Number
                        WS-Log-Where
                        WS-File-Key
                        SQL-Msg
                        SQL-Err.
*>
*>   Now Test for valid key for start, read-indexed and delete
*>      REMOVED as not used here
*>
*>  Work out what is being requested and convert to action!!
*>
*>    This version uses the JC pre-Sql processor.
*>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
*>
     evaluate File-Function
        when  1
              go to ba020-Process-Open
        when  2
              go to ba030-Process-Close
        when  3
              go to ba040-Process-Read-Next
        when  4
              go to ba050-Process-Read-Indexed
        when  5
              go to ba070-Process-Write
*>
*> option 6 is a special to cleardown all data
*>
        when  6                              *> DELETE-ALL  Special
              go to ba085-Process-DELETE-ALL
        when  7
              go to ba090-Process-Rewrite
        when  8
              go to ba080-Process-Delete
        when  9
              go to ba060-Process-Start
        when  15                             *> fn-Write-Raw  / 15
              go to ba170-Process-Write-Raw
        when  other                          *> 6 is spare / unused
              go to ba100-Bad-Function
     end-evaluate.
*>
 ba020-Process-Open.
 *>
 *>  Manual process MYSQL INIT
 *>    then perform MYSQL-1000-OPEN  THRU MYSQL-1090-EXIT
 *>
     string   DB-Schema      delimited by space
              X"00"          delimited by size
                               into WS-MYSQL-BASE-NAME
     end-string.
     string   DB-Host        delimited by space
              X"00"          delimited by size
                               into WS-MYSQL-HOST-NAME
     end-string.
     string   DB-UName       delimited by space
              X"00"          delimited by size
                               into WS-MYSQL-IMPLEMENTATION
     end-string.
     string   DB-UPass       delimited by space
              X"00"          delimited by size
                               into WS-MYSQL-PASSWORD
     end-string.
     string   DB-Port        delimited by space
              X"00"          delimited by size
                               into WS-MYSQL-PORT-NUMBER
     end-string.
     string   DB-Socket      delimited by space
              X"00"          delimited by size
                               into WS-MYSQL-SOCKET
     end-string.
     move     1 to ws-No-Paragraph.
     PERFORM  MYSQL-1000-OPEN  THRU MYSQL-1090-EXIT.
     if       fs-reply not = zero
              go   to ba999-end.
*>
*> *> /MYSQL INIT\
*>       BASE=ACASDB
*>       IMPLEMENTATION=dev-prog-001
*>       PASSWORD=mysqlpass
*> *> /MYSQL-END\
*>
     move    "OPEN IRSNOMINAL (RDB)" to WS-File-Key
     move    zero   to Most-Cursor-Set
     go      to ba999-end.
*>
 ba030-Process-Close.
     if      Cursor-Active
             perform ba998-Free.
*>
     move     2 to ws-No-Paragraph.
     move    "CLOSE IRSNOMINAL (RDB)" to WS-File-Key.
 /MYSQL CLOSE\
 /MYSQL-END\
*>
     go      to ba999-end.
*>
 ba040-Process-Read-Next.
*>
*>  Uses 3 (instead of 10) as EOF flag in WE-Error per irsub1
*>
*>   Here a SELECT first then fetch if no cursor active using lowest
*>    possible key of "0000000000"
*>           [ KEY-1 ]
*>
     if       Cursor-Not-Active
              set      KOR-x1 to 1                *> 1 = Primary
              move     KOR-offset (KOR-x1) to K
              move     KOR-length (KOR-x1) to L
*>
              move     spaces to WS-Where
              move     1   to J
              string
                       "`TIPE`='O' AND "     delimited by size
                       "`"                   delimited by size
                       KeyName (KOR-x1)      delimited by space
                       "`"                   delimited by size
                       " > "                 delimited by size   *> 26/12/16 NOT '='
                       '"0000000000"'          delimited by size
                       ' ORDER BY '          delimited by size
                       "`"                   delimited by size
                       keyname (KOR-x1)      delimited by space
                       "`"                   delimited by size
                         ' ASC '             delimited by size
                                      into ws-Where
                                      with pointer J
              end-string
*>
              move     ws-Where (1:J)   to WS-Log-Where       *>  For test logging
              move     3 to ws-No-Paragraph
              /MYSQL SELECT\
                   TABLE=IRSNL-REC
                   WHERE=ws-Where (1:J)      *> KEY-1 > "0000000000" ORDER BY IRSNL-REC ASC
              /MYSQL-END\
           move    "> 0000000000" to WS-File-Key
              if    Testing-2
                    display Display-Message-1 with erase eos
              end-if
*>
*>  It could be an empty table so test for it
*>
              if       WS-MYSQL-Count-Rows = zero
                       call  "MySQL_errno" using WS-MYSQL-Error-Number
                       call  "MySQL_sqlstate" using WS-MYSQL-SQLstate
                       move  WS-MYSQL-SqlState   to SQL-State
                       if    WS-MYSQL-Error-Number  not = "0  "
                             move WS-MYSQL-Error-Number  to SQL-Err
                             call "MySQL_error" using WS-MYSQL-Error-Message
                             move WS-MYSQL-Error-Message to SQL-Msg
                       end-if
                       move 10 to fs-reply
   *>                    move 10 to WE-Error
                     move 3 to WE-Error                 *> as in irsub1
                       move    "No Data" to WS-File-Key
                       go to ba999-End       *> can clear the dup code after testing
              end-if
              set Cursor-Active to true
              move     WS-MYSQL-Count-Rows to WS-Temp-Ed
              string   "> 0 got cnt=" delimited by size
                       WS-Temp-ED delimited by size
                       " recs"
                        into WS-File-Key
              end-string
              perform ba999-End                         *> log it
     end-if.                                            *> cursor now set
*>
 ba041-Reread.
*>
*>  If here cursor is set (even from start), so get the next row
*>
     move     spaces to WS-Log-Where.
     move     4 to ws-No-Paragraph.

     move zero to return-code.

     /MYSQL FETCH\
            TABLE=IRSNL-REC
     /MYSQL-END\
     end-call
*>
     if       return-code = -1                  *> no more data so free cursor & return
              move 10 to fs-Reply           *> WE-Error
            move 3 to WE-Error                              *> as in irsub1
              move    "EOF" to WS-File-Key
 *>             move     zero to Most-Cursor-Set
              set Cursor-Not-Active to true
              go to ba999-End
     end-if
*>
     if       WS-MYSQL-Count-Rows = zero
              call  "MySQL_errno" using WS-MYSQL-Error-Number
              call  "MySQL_sqlstate" using WS-MYSQL-SQLstate
              move  WS-MYSQL-SqlState   to SQL-State
              if    WS-MYSQL-Error-Number  not = "0  "
                    call "MySQL_error" using WS-MYSQL-Error-Message
                    move 10 to fs-reply                     *> EOF equivilent !!
       *>             move 10 to WE-Error
                   move 3 to WE-Error                       *> as in irsub1
                    move WS-MYSQL-Error-Number  to SQL-Err
                    move WS-MYSQL-Error-Message to SQL-Msg
                    initialize WS-IRSNL-Record with filler
                    move    "EOF2" to WS-File-Key
              end-if
              set Cursor-Not-Active to true
              go to ba999-End
     end-if.
*>
     if       fs-reply = 10
 *>             move     zero to Most-Cursor-Set
              set Cursor-Not-Active to true
              move    "EOF3" to WS-File-Key
              go to ba999-End
     end-if.
     perform  bb100-UnloadHVs.       *> transfer/move HV vars to Record layout
*>
*> test to see if pointer record 1st [ from irsub1 ] but shouldnt happen !
*>
     if       Sub
              go to ba041-Reread.
*>
     move     HV-KEY-1 to ws-temp-ed.
     move    ws-temp-ed to WS-File-Key.
     move     zero to fs-reply WE-Error.
     go       to ba999-end.
*>
 ba050-Process-Read-Indexed.
*>
*>  Now do on correct key within WHERE
*>  Sets up key and compare data
*>
     set      KOR-x1 to 1                *> 1 = Primary
     move     KOR-offset (KOR-x1) to K
     move     KOR-length (KOR-x1) to L
*>
     move     spaces to WS-Where
     move     1   to J
     string   "`"                   delimited by size
              KeyName (KOR-x1)      delimited by space
              "`"                   delimited by size
              '="'                  delimited by size
              WS-IRSNL-Record (K:L)       delimited by size
              '"'                   delimited by size
                      into WS-Where
                        with pointer J
     end-string
     move     WS-Where (1:J)   to WS-Log-Where.    *>  For test logging
     if    Testing-2
           display Display-Message-1 with erase eos
     end-if.
     move     5 to ws-No-Paragraph
     /MYSQL SELECT\
            TABLE=IRSNL-REC
            WHERE=WS-Where (1:J)
     /MYSQL-END\
*>
     if     WS-MYSQL-Count-Rows = zero
            move 21  to fs-Reply             *> could also be 23 or 14
            move 2 to WE-Error               *> as in irsub1
            go to ba998-Free
     end-if.
     move     6 to ws-No-Paragraph
     /MYSQL FETCH\
            TABLE=IRSNL-REC
     /MYSQL-END\
     end-call
*>
     if       WS-MYSQL-Count-Rows not > zero
              call  "MySQL_errno" using WS-MYSQL-Error-Number
              call  "MySQL_sqlstate" using WS-MYSQL-SQLstate
              move  WS-MYSQL-SqlState   to SQL-State
              if    WS-MYSQL-Error-Number  not = "0  "
                    move 21 to fs-reply    *> from 23
 *>                   move 990 to WE-Error
                    move 2 to WE-Error                 *> as in irsub1
                    call "MySQL_error" using WS-MYSQL-Error-Message
                    move WS-MYSQL-Error-Number to SQL-Err
                    move WS-MYSQL-Error-Message to SQL-Msg
                    move spaces to WS-File-Key
                    move "Not found 1" to NL-Name
                    go to ba998-Free
              else
                    move 21   to fs-reply    *> from 23
 *>                   move 989  to WE-Error
                    move 2 to WE-Error                 *> as in irsub1
                    move zero to SQL-Err
                   move "Not found 2" to NL-Name
                    move spaces to SQL-Msg
                    move spaces to WS-File-Key     *> next 2 is not really needed
                    go to ba998-Free
              end-if
     end-if                        *> row count zero should show up as a MYSQL error ?
     perform  bb100-UnloadHVs      *> transfer/move HV vars to ws-Record layout
     move     HV-KEY-1 to ws-temp-ed.
     move    ws-temp-ed to WS-File-Key.
*>
*>  IRSUB1 specific - - >
*>
     if       Sub
              if       Testing-1
                       perform Ca-Process-Logs
              end-if
              move NL-Owning  to NL-Sub-Nominal
              move NL-Pointer to NL-Owning
              move "Not found" to NL-Name
              go to  ba050-Process-Read-Indexed.
*>
     move     zero to FS-Reply WE-Error.
     go       to ba998-Free.
*>
 ba060-Process-Start.
*>
*> THIS MINOR CHANGES FOR IRSUB1 START/READ NEXT using
*>   read-indexed = or not < or > or <  ???
*>
*>  Check for Param error 1st on start
*>
     if       access-type < 5 or > 8                   *> not using not < or not >
              move 99 to FS-Reply
              move 997 to WE-Error                     *> Invalid calling parameter settings     997
              go to ba999-end
     end-if
*>
*>  First clear any active cursors
*>
     if       Cursor-Active
              perform ba998-Free.
*>
*>  Now do Start on correct key before read-next  within WHERE
*>  Set up MOST-relation for condition test and key
*>
     set      KOR-x1 to 1                *> 1 = Primary
     move     KOR-offset (KOR-x1) to K
     move     KOR-length (KOR-x1) to L
*>
     move     spaces to MOST-Relation.
     move     1   to J.
     evaluate Access-Type     *>  x shows used in irs.
              when  5                           *>x fn-equal-to
                    move "=  " to MOST-Relation
              when  6                           *> fn-less-than
                    move "<  " to MOST-Relation
              when  7                           *>x fn-greater-than
                    move ">  " to MOST-Relation
              when  8                           *>x fn-not-less-than
                    move ">= " to MOST-Relation
              when  9                           *> fn-not-greater-than [ not currently used in ACAS ]
                    move "<= " to MOST-Relation
     end-evaluate
*>
     move     spaces  to WS-Where.
     string   "`"                   delimited by size
              KeyName (KOR-x1)      delimited by space
              "`"                   delimited by size
              MOST-relation         delimited by space
              '"'                   delimited by size
              WS-IRSNL-RECord (K:L) delimited by size
 *>             NL-Key
              '"'                   delimited by size
              " ORDER BY "          delimited by size   *> very iffy about this - wanted ?
              "`"                   delimited by size
              keyname (KOR-x1)      delimited by space
              "`"                   delimited by size
                ' ASC '             delimited by size
                             into WS-Where
                             with pointer J
     end-string
     move     WS-Where (1:J)  to WS-Log-Where.    *>  For test logging
     move     NL-Key to WS-File-Key.   *> ws-IRSNL-Record (K:L) to WS-File-Key.
     if    Testing-2
           display Display-Message-1 with erase eos
     end-if
*>
     move     8 to ws-No-Paragraph
     /MYSQL SELECT\
            TABLE=IRSNL-REC
            WHERE=WS-Where (1:J)
     /MYSQL-END\
*>
     if       WS-MYSQL-Count-Rows not zero
 *>             move 1 to Most-Cursor-Set
              set Cursor-Active to true
     end-if
*>
     if       WS-MYSQL-Count-Rows = zero
              call  "MySQL_errno" using WS-MYSQL-Error-Number
              call  "MySQL_sqlstate" using WS-MYSQL-SQLstate
              move  WS-MYSQL-SqlState   to SQL-State
              if    WS-MYSQL-Error-Number  not = "0  "
                    call "MySQL_error" using WS-MYSQL-Error-Message
                    move WS-MYSQL-Error-Number  to SQL-Err
                    move WS-MYSQL-Error-Message to SQL-Msg
                    move 21 to fs-reply                  *> this may need changing for val in WE-Error!!
                    move 2 to WE-Error                   *> as in irsub1
                    go to ba999-End
              end-if
     else
              move  zero to FS-Reply WE-Error            *> next 2 for testing
              move     WS-MYSQL-Count-Rows to WS-Temp-Ed
              string   MOST-relation
                       WS-IRSNL-RECord (K:L)
                       " got =" delimited by size
                       WS-Temp-ED delimited by size
                       " recs"
                        into WS-File-Key
              end-string
     end-if
     perform  ba999-end.                                 *> Log it
*>
*> Here we need FETCH as SELECT has been issued & cursor active
*>
     go to ba041-Reread.
*>
*> Changed to do start then read next
*>   As per irsub1 operations
*>
*>     go       to ba999-end.
 ba070-Process-Write.
 *>
 *>  CHANGED for irs as sub-nominal require two additions
 *>
     perform  bb000-HV-Load.                       *>  move WS-IRSNL-RECord fields to HV fields
     move     NL-Key to WS-File-Key.
     move     zero to FS-Reply WE-Error
     move     spaces to SQL-Msg
     move     zero to SQL-Err
     move     10 to ws-No-Paragraph.
     perform  bb200-Insert.
     if       WS-MYSQL-COUNT-ROWS not = 1
              call  "MySQL_errno" using WS-MYSQL-Error-Number
              call  "MySQL_sqlstate" using WS-MYSQL-SQLstate
              move  WS-MYSQL-SqlState   to SQL-State
              if    WS-MYSQL-Error-Number  not = "0  "
                    call "MySQL_error" using Ws-Mysql-Error-Message
                    move WS-MYSQL-Error-Number  to SQL-Err
                    move WS-MYSQL-Error-Message to SQL-Msg
                    if    SQL-Err (1:4) = "1062"
                                     or = "1022"
                        or Sql-State = "23000"  *> Dup key (rec already present)
                          move 22 to fs-reply
                    else
                          move 99 to fs-reply                  *> this may need changing for val in WE-Error!!
                    end-if
              end-if
     end-if
     if       Testing-1
              perform Ca-Process-Logs
     end-if.
*>
 ba072-Proc-Write-Subs.
*>
*>  IRS only code, for Extra processing for sub-nominal.
*>
     if       SQL-Err = "1062" or "1022"
        or    FS-Reply = 22    *> from original irsub1
              display IR906 at 2401 with foreground-color 4
              accept WS-Reply at 2438.    *> TESTING
*>
*>  Specials for testing as COA incorrectly coded without subs
*>
     if       Owner
         AND  NL-Sub-Nominal = zero  *> its a sub pointer really
         AND  NL-Tipe = "O"
         AND  NL-Name = spaces           *> definately
              move     "S"            to NL-Tipe
              perform ba090-Process-Rewrite thru ba092-Finish-1
              go       to ba999-Exit     *> wont bother logging it - special
     end-if
*>
     if       Owner            *> no more processing - we are done & logged.
              go to ba999-exit.
*>
     move     "O" to NL-Tipe.
     perform  ba090-Process-Rewrite thru ba092-Finish-1.
     if       WE-Error = 994
              display IR907 at 2401 with foreground-color 4
              accept WS-Reply at 2432    *> TESTING can remove ?
     end-if
*>
*>  Extra code to stop zero keys  21/12/16
*>
     if       NL-Sub-Nominal = zero
              go to ba999-Exit.
*>
     move     NL-Owning      to NL-Pointer.
     move     NL-Sub-Nominal to NL-Owning.
     move     zero           to NL-Sub-Nominal.
*>
 ba073-Fix-Up-Subs.
     move     "S"            to NL-Tipe.
     perform  ba070-Process-Write.
     if       SQL-Err = "1062" or "1022"
       or     FS-Reply = 22
              display IR908 at 2401 with foreground-color 4
              accept WS-Reply at 2435    *> TESTING
     end-if                                   *> here from irsub1
*> JIC
     if       fs-reply not = zero
              perform ba090-Process-Rewrite thru ba092-Finish-1
     end-if.
     move     NL-Owning  to NL-Sub-Nominal.   *> Do not know why this was missed out
     move     NL-Pointer to NL-Owning.        *>  but restored in case used by caller
     go       to ba999-Exit.
*>
 ba080-Process-Delete.        *> IRS does not test for error cond. as in irsub1
*>
     set      KOR-x1 to 1                *> 1 = Primary
     move     KOR-offset (KOR-x1) to K
     move     KOR-length (KOR-x1) to L
*>
     move     spaces to WS-Where
     move     1   to J
     string   "`"                   delimited by size
              KeyName (KOR-x1)      delimited by space
              "`"                   delimited by size
              '="'                  delimited by size
              WS-IRSNL-RECord (K:L)       delimited by size
 *>             NL-Key
              '"'                   delimited by size
                      into WS-Where
                        with pointer J
     end-string
     move     WS-IRSNL-Record (K:L)  to WS-File-Key.
     move     WS-Where (1:J)   to WS-Log-Where.   *>  For test logging
     if    Testing-2
           display Display-Message-1 with erase eos
     end-if
     move     13 to ws-No-Paragraph.
     /MYSQL DELETE\
            TABLE=IRSNL-REC
            WHERE=WS-Where (1:J)
     /MYSQL-END\
     if       WS-MYSQL-COUNT-ROWS not = 1           *>  TEST IS NOT IN IRSUB1
              call  "MySQL_errno" using WS-MYSQL-Error-Number
              call  "MySQL_sqlstate" using WS-MYSQL-SQLstate
              move  WS-MYSQL-SqlState   to SQL-State
              if    WS-MYSQL-Error-Number  not = "0  "
                    call "MySQL_error" using Ws-Mysql-Error-Message
                    move WS-MYSQL-Error-Number  to SQL-Err
                    move WS-MYSQL-Error-Message to SQL-Msg
                    move 99 to fs-reply
                    move 995 to WE-Error
              end-if
              go to ba999-End                       *> produce log
     else
              move spaces to SQL-Msg SQL-State
              move zero   to SQL-Err
     end-if.
     move     zero to FS-Reply WE-Error.
     if       Testing-1
              perform Ca-Process-Logs
     end-if
*>
*> Now delete the pointer if NOT owner
*>
     if       owner
              go to    ba999-Exit.
*>
*> Delete the pointer
*>
     move     nl-sub-nominal to nl-owning.
     move     zero           to nl-sub-nominal.
     move     14         to WS-No-Paragraph.
     move     spaces to WS-Where
     move     1   to J
     string   "`"                   delimited by size
              KeyName (KOR-x1)      delimited by space
              "`"                   delimited by size
              '="'                  delimited by size
              WS-IRSNL-RECord (K:L)       delimited by size
 *>             NL-Key
              '"'                   delimited by size
                      into WS-Where
                        with pointer J
     end-string
     move     WS-IRSNL-Record (K:L)  to WS-File-Key.
     move     WS-Where (1:J)   to WS-Log-Where.   *>  For test logging
     if    Testing-2
           display Display-Message-1 with erase eos
     end-if
     /MYSQL DELETE\
            TABLE=IRSNL-REC
            WHERE=WS-Where (1:J)
     /MYSQL-END\
     if       WS-MYSQL-COUNT-ROWS not = 1           *>  TEST IS NOT IN IRSUB1
              call "MySQL_errno" using WS-MYSQL-Error-Number
              call  "MySQL_sqlstate" using WS-MYSQL-SQLstate
              move  WS-MYSQL-SqlState   to SQL-State
              if    WS-MYSQL-Error-Number  not = "0  "
                    call "MySQL_error" using Ws-Mysql-Error-Message
                    move WS-MYSQL-Error-Number  to SQL-Err
                    move WS-MYSQL-Error-Message to SQL-Msg
                    move 99 to fs-reply
                    move 995 to WE-Error
              end-if
              go to ba999-End
     else
              move spaces to SQL-Msg SQL-State
              move zero   to SQL-Err
     end-if.
     move     zero to FS-Reply WE-Error.
     go       to ba999-End.
*>
 ba085-Process-Delete-ALL.    *> THIS IS NON STANDARD
*>
*> This is the equivalent of :
*>           EXEC SQL
*>              DELETE
*>              FROM IRSNL-REC
*>           END-EXEC.
*>
*>  That creates the follwoing code from dbpre
*>
*>   MOVE LOW-VALUES TO SQLCA-STATEMENT
*>   STRING
*>     "DELETE " DELIMITED SIZE
*>     "FROM " DELIMITED SIZE
*>     "IRSNL-REC " DELIMITED SIZE
*>   INTO SQLCA-STATEMENT
*>   END-STRING
*>   CALL "MySQL_query" USING SQLCA-STATEMENT
*>   END-CALL
*>
*> So if this does not work it will be changed.
*>
     move     9999999999  to NL-Key.         *> The last possible data
*>
     set      KOR-x1 to 1
     move     KOR-offset (KOR-x1) to K
     move     KOR-length (KOR-x1) to L
*>
     move     spaces to WS-Where
     move     1   to J
     string   "`"                   delimited by size
              KeyName (KOR-x1)      delimited by space
              "`"                   delimited by size
              '<"'                  delimited by size
              WS-IRSNL-RECord (K:L)       delimited by size
              '"'                   delimited by size
                      into WS-Where
                        with pointer J
     end-string
     move     spaces to WS-File-Key
     string   "Deleting back from " delimited by size
               NL-Key               delimited by size
                      into WS-File-Key
     end-string                                   *> for logging
     move     WS-Where (1:J)   to WS-Log-Where.   *>  For test logging
     if    Testing-2
           display Display-Message-1 with erase eos
     end-if
     move     15 to ws-No-Paragraph.
     /MYSQL DELETE\
            TABLE=IRSNL-REC
            WHERE=WS-Where (1:J)
     /MYSQL-END\
     if       WS-MYSQL-COUNT-ROWS not > zero    *> Changed for delete-ALL
              call  "MySQL_errno" using WS-MYSQL-Error-Number
              call  "MySQL_sqlstate" using WS-MYSQL-SQLstate
              move  WS-MYSQL-SqlState   to SQL-State
              if    WS-MYSQL-Error-Number  not = "0  "
                    call "MySQL_error" using Ws-Mysql-Error-Message
                    move WS-MYSQL-Error-Number  to SQL-Err
                    move WS-MYSQL-Error-Message to SQL-Msg
                    move 99 to fs-reply
                    move 995 to WE-Error
              end-if
              go to ba999-End
     else      *> of course there could be no data in table
              move spaces to SQL-Msg
              move zero   to SQL-Err
     end-if.
     move     zero to FS-Reply WE-Error.
     go       to ba999-End.
*>
 ba090-Process-Rewrite.
*>
     perform  bb000-HV-Load.       *> Load up the HV fields from table record in WS
     move     17 to ws-No-Paragraph.
     set      KOR-x1 to 1            *> 1 = Primary
     move     KOR-offset (KOR-x1) to K
     move     KOR-length (KOR-x1) to L
*>
     move     spaces to WS-Where
     move     1   to J
     string   "`"                   delimited by size
              KeyName (KOR-x1)      delimited by space
              "`"                   delimited by size
              '="'                  delimited by size
              WS-IRSNL-Record (K:L)       delimited by size
              '"'                   delimited by size
                      into WS-Where
                        with pointer J
     end-string
     move     WS-Where (1:J)   to WS-Log-Where.    *>  For test logging
     perform  bb300-Update.
*>
     if       Testing-2
              display Display-Message-1 with erase eos
     end-if
*>
     if       WS-MYSQL-COUNT-ROWS not = 1
              call "MySQL_errno" using WS-MYSQL-Error-Number
              call     "MySQL_sqlstate" using WS-MYSQL-SQLstate
              move     WS-MYSQL-SqlState   to SQL-State
              if    WS-MYSQL-Error-Number  not = "0  "
                    call "MySQL_error" using Ws-Mysql-Error-Message
                    move WS-MYSQL-Error-Number  to SQL-Err
                    move WS-MYSQL-Error-Message to SQL-Msg
                    move 99 to fs-reply                  *> this may need changing for val in WE-Error!!
                    move 994 to WE-Error
              end-if
*>
              if       Testing-1
                       perform Ca-Process-Logs
              end-if
              go to ba092-Finish-1    *> ba999-exit  [ error ]
     end-if
     move     zero   to FS-Reply WE-Error.
     move     zero   to SQL-Err.
     move     spaces to SQL-Msg.
     go       to ba092-Finish-1.  *> was ba999-exit.[normal finish]
*>
 ba092-Finish-1.
 ba093-Finish-2.
     go       to ba999-Exit.
*>
 ba170-Process-Write-Raw.
     perform  bb000-HV-Load.                       *>  move WS-IRSNL-RECord fields to HV fields
     move     NL-Key to WS-File-Key.
     move     zero to FS-Reply WE-Error
     move     spaces to SQL-Msg
     move     zero to SQL-Err
     move     18 to ws-No-Paragraph.
     perform  bb200-Insert.
     if       WS-MYSQL-COUNT-ROWS not = 1
              call "MySQL_errno" using WS-MYSQL-Error-Number
              call     "MySQL_sqlstate" using WS-MYSQL-SQLstate
              move     WS-MYSQL-SqlState   to SQL-State
              if    WS-MYSQL-Error-Number  not = "0  "
                    call "MySQL_error" using Ws-Mysql-Error-Message
                    move WS-MYSQL-Error-Number  to SQL-Err
                    move WS-MYSQL-Error-Message to SQL-Msg
                    if    SQL-Err (1:4) = "1062"
                                     or = "1022"
                        or Sql-State = "23000"  *> Dup key (rec already present)
                          move 22 to fs-reply
                    else
                          move 99 to fs-reply                  *> this may need changing for val in WE-Error!!
                    end-if
              end-if
     end-if
     if       Testing-1
              perform Ca-Process-Logs
     end-if.
*>
     if       fs-reply not = zero
              perform ba090-Process-Rewrite thru ba092-Finish-1
     end-if.                    *> this will run ca-process-logging
     go       to ba999-Exit.
*>
 ba100-Bad-Function.
*>
*> Houston; We have a problem
*>
     move     990 to WE-Error.
     move     99 to Fs-Reply.
     go       to ba999-end.
*>
/MYSQL PRO\
/MYSQL-END\
*>
 ba998-Free.
     move     20 to ws-No-Paragraph.
     /MYSQL FREE\
            TABLE=IRSNL-REC
     /MYSQL-END\
 *>    move     zero to Most-Cursor-Set.
     set Cursor-Not-Active to true.
*>
 ba999-end.
*>  Any Clean ups before quiting    move data record ?????  do so at the start as well ??????
*>
     if       Testing-1
              perform Ca-Process-Logs
     end-if.
*>
 ba999-exit.
     exit program.
*>
 bb000-HV-Load      Section.
*>*************************
*>
*>  Load the Host variables with data from the passed record
*>
*> This Method loads the Host Variables for the Base table with
*> the data passed in the data-buffer.
*>
     initialize TD-IRSNL-REC.
     move     NL-Key                   to HV-KEY-1.
     move     NL-Tipe                  to HV-TIPE.
     if       NL-Pointer numeric
          and NL-Pointer > zero
              move     NL-Pointer      to HV-REC-POINTER
     else
              move     NL-Name         to HV-NL-NAME
              move     NL-DR           to HV-DR
              move     NL-CR           to HV-CR
              move     NL-AC           to HV-AC
              move     DR-Last-01      to HV-DR-LAST-01
              move     CR-Last-01      to HV-CR-LAST-01
              move     DR-Last-02      to HV-DR-LAST-02
              move     CR-Last-02      to HV-CR-LAST-02
              move     DR-Last-03      to HV-DR-LAST-03
              move     CR-Last-03      to HV-CR-LAST-03
              move     DR-Last-04      to HV-DR-LAST-04
              move     CR-Last-04      to HV-CR-LAST-04
     end-if.
*>
*> Loading HVs implies a non-Fetch action. RGs are handled separately for
*> all such actions so they must not be loaded here.
*>
 bb000-Exit.
     exit section.
*>
 bb100-UnloadHVs    Section.
*>*************************
*>
*>  Load the data buffer in the interface with data from the host variables.
*> (init moved lower)
*>
*> NULL fields must not be returned in the buffer. SQL filters each column to
*>  ensure it has a proper value.  This saves using indicator variables.
*>
     initialize WS-IRSNL-Record.
*>
     move     HV-KEY-1                    to NL-Key.
     move     HV-TIPE                     to NL-Tipe.
     if       HV-REC-POINTER > zero
              move     HV-REC-POINTER     to NL-Pointer
     else
              move     HV-NL-NAME         to NL-Name
              move     HV-DR              to NL-Dr
              move     HV-CR              to NL-Cr
              move     HV-AC              to NL-AC
              move     HV-DR-LAST-01      to DR-Last-01
              move     HV-DR-LAST-02      to DR-Last-02
              move     HV-DR-LAST-03      to DR-Last-03
              move     HV-DR-LAST-04      to DR-Last-04
              move     HV-CR-LAST-01      to CR-Last-01
              move     HV-CR-LAST-02      to CR-Last-02
              move     HV-CR-LAST-03      to CR-Last-03
              move     HV-CR-LAST-04      to CR-Last-04
     end-if.
*>
 bb100-Exit.
     exit section.
*>
 bb200-Insert Section.
*>*******************
*>
 /MYSQL INSERT\
        TABLE=IRSNL-REC
 /MYSQL-END\
       .     *> period here
*>
 bb200-Exit.
     exit section.
*>
 bb300-Update Section.
*>*******************
*>
 /MYSQL UPDATE\
     TABLE=IRSNL-REC
     WHERE=WS-Where (1:J)
 /MYSQL-END\
       .     *> period here
*>
 bb300-Exit.
     exit section.
*>
 Ca-Process-Logs.
*>**************
*>
     call     "fhlogger" using File-Access
                               ACAS-DAL-Common-data.
*>
 ca-Exit.     exit.
*>
end program irsnominalMT.
